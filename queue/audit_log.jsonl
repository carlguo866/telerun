{"timestamp": "2024-04-16T15:13:09.596294+00:00", "username": "carlguo", "action": "submit", "request": {"source": "#include <stdio.h>\n\n// CUDA Kernel for vector addition\n__global__ void vectorAdd(const float *A, const float *B, float *C, int numElements)\n{\n    int i = blockDim.x * blockIdx.x + threadIdx.x;\n    if (i < numElements)\n    {\n        C[i] = A[i] + B[i];\n    }\n}\n\nint main(void)\n{\n    int numElements = 50000;\n    size_t size = numElements * sizeof(float);\n    float *h_A = (float *)malloc(size);\n    float *h_B = (float *)malloc(size);\n    float *h_C = (float *)malloc(size);\n\n    // Initialize the host input vectors\n    for(int i = 0; i < numElements; ++i)\n    {\n        h_A[i] = rand()/(float)RAND_MAX;\n        h_B[i] = rand()/(float)RAND_MAX;\n    }\n\n    // Allocate the device input vector A\n    float *d_A = NULL;\n    cudaMalloc((void **)&d_A, size);\n\n    // Allocate the device input vector B\n    float *d_B = NULL;\n    cudaMalloc((void **)&d_B, size);\n\n    // Allocate the device output vector C\n    float *d_C = NULL;\n    cudaMalloc((void **)&d_C, size);\n\n    // Copy the host input vectors A and B in host memory to the device input vectors in\n    // device memory\n    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);\n    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);\n\n    // Launch the Vector Add CUDA Kernel\n    int threadsPerBlock = 256;\n    int blocksPerGrid =(numElements + threadsPerBlock - 1) / threadsPerBlock;\n    vectorAdd<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, numElements);\n    cudaDeviceSynchronize();\n\n    // Copy the device result vector in device memory to the host result vector\n    // in host memory.\n    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);\n\n    // Free device global memory\n    cudaFree(d_A);\n    cudaFree(d_B);\n    cudaFree(d_C);\n\n    // Free host memory\n    free(h_A);\n    free(h_B);\n    free(h_C);\n\n    // Reset the device and exit\n    // cudaDeviceReset causes the driver to clean up all state. While\n    // not mandatory in normal operation, it is good practice.\n    cudaDeviceReset();\n\n    return 0;\n}\n"}}
